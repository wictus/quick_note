#!/usr/bin/python

import os
import re
import sys
import time
import datetime
import unicodedata
import uuid

import copy

import traceback
import logging

###
### GLOBAL DATA
###

class global_data(object):
    local_setup = False
    setup = {}

    arguments = []
    
    SETUP = """# Note template full (!) path only if different (!) from ../TEMPLATE/template.tex.
# The note is taken from this file from the text between:
#    % begin_note
#    and 
#    % end_note
# The full file will be compiled using the "convert" command - below.
# template=path/to/template/eg/template.tex

# Computer name or other name attached to note:
notename = computer

# Full (!) path to note directory only if different (!) from ../NOTES.
# notepath=/path/to/NOTES/

# Full (!) path to note directory only if different (!) from ../TRASH.
# trashpath=/path/to/TRASH/

# Maximum notes to output, if not set all will be printed:
max=10

# Editor command:
editor = vim +6

# Template extension:
ext = .tex

# Turn template into pdf, dvi, etc. The first argument is the directory to write pdf, dvi etc. to. 
convert = pdflatex 

# Extension of the resulting file:
res = .pdf

# Command to view:
viewer = xpdf -rv

# Command to execute when editing note data:
# lock = <some command, for example stop synchronization of NOTES directory>

# Command to execute when finished note data:
# unlock = <some command, for example start synchronization of NOTES directory>



"""

    TEMPLATE = """\documentclass{article}

\\begin{document}

% begin_note

% end_note

\end{document}
"""

    note_title = None
    note_key_words = None
    note_yek_words = None
    note_file_directory = None
    note_info_path = None
    note_note_path = None
    note_tex_path = None
    note_date = None
    note_files = None
    note_uuid4 = None
    note_name = None

    search_functions = []

    date_from = None
    date_to = None

    note_number = None

    max_plus = 0

###
### THE FUNCTIONS
###

#create_note = lambda:sys.stdout.write("create_note()")

def create_note():
    if(global_data.note_title == None or global_data.note_key_words == None):
        sys.stdout.write('Not enough data to create note, try:\n$note title "some title" keywords "some key" words create\n.')
        if(lock != None): rel_lock()
        exit(1)
    attempt = 0
    is_created = False
    while(attempt <= 10 and (not is_created)):
        ticks = int(time.time() * 1000)
        global_data.note_date = [str(ticks) , 
                datetime.date.today().strftime("%d") , 
                datetime.date.today().strftime("%m") , 
                datetime.date.today().strftime("%y") ,
                datetime.date.today().strftime("%d_%m_%y")] 
        global_data.note_uuid4 = str(uuid.uuid4())
        global_data.note_name = global_data.setup["notename"][-1]
        global_data.note_file_directory = os.path.join(global_data.setup['notepath'][-1] , "".join([str(ticks),"_",global_data.note_uuid4]))
        attempt += 1
        try:
            os.stat(global_data.note_file_directory)
            time.sleep(0.001)
        except os.error as e:
            if(not is_created):
                os.mkdir(global_data.note_file_directory)
                os.mkdir(os.path.join(global_data.note_file_directory , "FILES"))
                os.mkdir(os.path.join(global_data.note_file_directory , "DATA"))
                is_created = True
    if(not is_created):
        sys.stdout.write('Could not create note directory after ' + str(attempt) + ' attempts.')
        if(lock != None): rel_lock()
        exit(1)

    local_setup_path = os.path.join(global_data.note_file_directory , "DATA" ,  
            "".join([global_data.note_date[0],"_",global_data.note_uuid4]) +
            '.setup')
    local = open(local_setup_path , 'w')
    for key in global_data.setup:
        if(key != "notepath" and key != "trashpath"):
            local.write("".join([key , '=' , global_data.setup[key][-1] , '\n']))
    local.close()

    if(global_data.local_setup):
        os.system(global_data.setup['editor'][-1] + ' ' + local_setup_path)

    get_setup(global_data.setup , local_setup_path) 
    complement_setup()

    global_data.note_info_path = os.path.join(global_data.note_file_directory , "DATA" , "".join([global_data.note_date[0],"_",global_data.note_uuid4]))
    global_data.note_note_path = os.path.join(global_data.note_file_directory , "DATA" , "".join([global_data.note_date[0],"_",global_data.note_uuid4]) + 
            ".note")
    global_data.note_tex_path = os.path.join(global_data.note_file_directory , "DATA" , "".join([global_data.note_date[0],"_",global_data.note_uuid4]) + 
            global_data.setup['ext'][-1])
    template = open(global_data.setup['textemplate'][-1] , 'r')
    if(global_data.note_yek_words == None):
        global_data.note_yek_words = []
    for word in global_data.note_yek_words:
        try:
            global_data.note_key_words.remove(word)
        except AttributeError as e:
            print word + ' not found in note key words.'
    output = open(global_data.note_tex_path , 'w')
    for line in template.readlines():
        output.write(line)
    output.close()
    template.close()
    note = open(global_data.note_note_path , 'w')
    os.system(global_data.setup['editor'][-1] + ' ' + global_data.note_tex_path)
    insert = False
    note = open(global_data.note_note_path , 'w')
    output = open(global_data.note_tex_path , 'r')
    for line in output.readlines():
        if((not re.search(r'begin_note' , line) == None) or (not re.search(r'end_note' , line) == None)):
            insert = not insert
            continue
        if(insert):
            note.write(line)
    output.close()
    note.close()
    info = open(global_data.note_info_path , 'w')
    info.write("this_title=" + global_data.note_title + '\n')
    for word in global_data.note_key_words:
        info.write("this_key=" + word + '\n')
    info.write("this_date=" + global_data.note_date[0] + '\n')
    info.write("this_date=" + global_data.note_date[1] + '\n')
    info.write("this_date=" + global_data.note_date[2] + '\n')
    info.write("this_date=" + global_data.note_date[3] + '\n')
    info.write("this_date=" + global_data.note_date[4] + '\n')
    info.write("this_uuid4=" + global_data.note_uuid4 + '\n')
    info.write("this_name=" + global_data.note_name + '\n')
    info.close()
    if(not global_data.note_files == None):
        for f in global_data.note_files:
            os.system('cp -r ' + f + ' ' +  os.path.join(global_data.note_file_directory , "FILES"))
    current = os.getcwd()
    #print os.path.join(global_data.note_file_directory , "FILES") 
    os.chdir(os.path.join(global_data.note_file_directory , "DATA"))
    #print global_data.setup['convert'][-1] + ' ' + global_data.note_tex_path
    os.system(global_data.setup['convert'][-1] + ' ' + global_data.note_tex_path)
    os.chdir(current)
    
    global_data.setup = {}
    get_setup(global_data.setup , os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'setup'))
    complement_setup()
    
    open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'w').close()
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    files = os.listdir(global_data.setup['notepath'][-1])
    files.sort()
    i = 0
    for f in files:
        open_note(f)
        selectionFILE.write(global_data.note_file_directory + '\n')
    selectionFILE.close()


#list_notes = lambda:sys.stdout.write("list_notes()")

def list_notes():
    open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'w').close()
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    files = os.listdir(global_data.setup['notepath'][-1])
    files.sort()
    i = 0
    for f in files:
        open_note(f)

        i += 1
        if(i > global_data.note_number - int(global_data.setup['max'][-1]) - global_data.max_plus):
            sys.stdout.write('\x1b[1;35m')
            print '----------------------------------------------------------'
            print str(global_data.note_number - i + 1) + '\t' + f
            print '----------------------------------------------------------'
            sys.stdout.write('\x1b[0m')
            print '* key words:'
            for word in global_data.note_key_words:
                sys.stdout.write(' ' + word + ' ')
            sys.stdout.write("\n")
            print '* title:'
            sys.stdout.write('\x1b[1m')
            print global_data.note_title.strip()
            sys.stdout.write('\x1b[0m')
            print '* date (D/M/Y):'
            print global_data.note_date[1] + '/' + global_data.note_date[2] + '/' + global_data.note_date[3]
            print '* note:'
            #sys.stdout.write('\x1b[1m')
            note = open(global_data.note_note_path , 'r')
            for line in note.readlines():
                sys.stdout.write(line)
            note.close()
            #sys.stdout.write('\x1b[0m')
        selectionFILE.write(global_data.note_file_directory + '\n')

    selectionFILE.close()

#key_words = lambda:sys.stdout.write("key_words()")

def key_words():
    if(global_data.note_key_words == None):
        global_data.note_key_words = []
    for keyword in global_data.arguments:
        words = keyword.strip()
        print 
        global_data.note_key_words.append(
           unicodedata.normalize('NFKD', words.decode("utf-8")).encode('ascii','ignore').upper())

#yek_words = lambda:sys.stdout.write("yek_words()")

def yek_words():
    if(global_data.note_yek_words == None):
        global_data.note_yek_words = []
    for keyword in global_data.arguments:
        words = keyword.strip()
        global_data.note_yek_words.append(words.upper())

#title_note = lambda:sys.stdout.write("title_note()")

def title_note():
    if(len(global_data.arguments) != 1):
        sys.stdout.write('A note can have only one title.')
        if(lock != None): rel_lock()
        exit(1)
    global_data.note_title = global_data.arguments[0]

#find_note = lambda:sys.stdout.write("find_note()")

def find_note():
    open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'w').close()
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    note_key = []
    for keyword in global_data.arguments:
        words = keyword.strip()
        #for word in words:
        note_key.append(unicodedata.normalize('NFKD', words.decode("utf-8")).encode('ascii','ignore').upper())
    scores = []
    files = os.listdir(global_data.setup['notepath'][-1])
    files.sort()
    for f in files:
        open_note(f)

        score = 0

        for keyword in note_key:
            for key in global_data.note_key_words:
                score += len(re.findall(keyword , key))
                score += len(re.findall(key , keyword))

        if(len(note_key) == 0):
            score = 1

        stack = []

        for function in reversed(global_data.search_functions):
            function[0](global_data.note_key_words , stack , function[1])

        if(len(stack) != 1 and len(global_data.search_functions) != 0):
            sys.stdout.write('Search stack expected to have 1 element.')
            if(lock != None): rel_lock()
            exit(1)
        elif(len(global_data.search_functions) != 0):
            if(stack[0] == False):
                score = 0

        if global_data.date_to != None and global_data.date_from != None:
            if int(global_data.note_date[0]) > global_data.date_to:
                score = 0

            if int(global_data.note_date[0]) < global_data.date_from:
                score = 0

        scores.append([score , f , global_data.note_file_directory , global_data.note_key_words , global_data.note_title])

    scores = sorted(scores , key=lambda x:x[0])
    i = 0
    for result in scores:
        i += 1
        if(i > global_data.note_number - int(global_data.setup['max'][-1]) - global_data.max_plus):
            sys.stdout.write('\x1b[1;35m')
            print '----------------------------------------------------------'
            print str(global_data.note_number - i + 1) + '\t' + result[1]
            print '----------------------------------------------------------'
            sys.stdout.write('\x1b[0m')
            print '* keywords: '
            for key in result[3]:
                sys.stdout.write(' ' + key + ' ')
            print '\n* title: '
            sys.stdout.write('\x1b[1m')
            print result[4].strip()
            sys.stdout.write('\x1b[0m')
            print '* score: ' , '\x1b[1m' , result[0] , '\x1b[0m'
        selectionFILE.write(result[2] + '\n')
    selectionFILE.close()

#files_note = lambda:sys.stdout.write("files_note()")

def files_note():
    global_data.note_files = global_data.arguments

def note_paste():
    if(len(global_data.arguments) != 1):
        sys.stdout.write('Only one argument for note paste.')
        if(lock != None): rel_lock()
        exit(1)
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    num = global_data.note_number - int(global_data.arguments[0]) + 1
    i = 0
    for line in selectionFILE.readlines():
        i += 1
        if(i == num):
            files = os.listdir(os.path.join(line.strip() , "FILES"))
            if(len(files) > 1):
                print "More then one file in note."
                for dr in files:
                    print dr
                    paste = raw_input("Paste [y/n] ? ") == "y"
                    if paste:
                        os.system("cp " + os.path.join(line.strip() , "FILES" , dr) + " ./")
            else:
                for dr in files:
                    os.system("cp " + os.path.join(line.strip() , "FILES" , dr) + " ./")
    selectionFILE.close()


#note_cd = lambda:sys.stdout.write("note_cd()")

def note_cd():
    if(len(global_data.arguments) != 1):
        sys.stdout.write('Only one argument for note cd.')
        if(lock != None): rel_lock()
        exit(1)
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    num = global_data.note_number - int(global_data.arguments[0]) + 1
    i = 0
    for line in selectionFILE.readlines():
        i += 1
        if(i == num):
            print 'cd ' + os.path.join(line.strip() , "FILES")
            os.chdir(os.path.join(line.strip() , "FILES"))
            os.system('bash')
    selectionFILE.close()

#note_pdf = lambda:sys.stdout.write("note_pdf()")

def note_pdf():
    if(len(global_data.arguments) != 1):
        sys.stdout.write('Only one argument for note pdf.')
        if(lock != None): rel_lock()
        exit(1)
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    num = global_data.note_number - int(global_data.arguments[0]) + 1
    i = 0
    for line in selectionFILE.readlines():
        i += 1
        if(i == num):
            name = os.path.basename(os.path.realpath(line.strip()))
            global_data.note_file_directory = os.path.join(global_data.setup['notepath'][-1] , name)
            try:
                os.stat(os.path.join(global_data.note_file_directory , "DATA" , name + '.setup'))
            except os.error as e:
                sys.stdout.write('No setup in note.')
                if(lock != None): rel_lock()
                exit(1)
            local_setup_path = os.path.join(global_data.note_file_directory , "DATA" ,  
                    name + '.setup')
            get_setup(global_data.setup , local_setup_path) 
            complement_setup()
            os.system(global_data.setup['viewer'][-1] + ' ' +
                    os.path.join(line.strip() , "DATA" , name + global_data.setup['res'][-1]))
            global_data.setup = {}
            get_setup(global_data.setup , os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'setup'))
            complement_setup()
    selectionFILE.close()

#note_pwd = lambda:sys.stdout.write("note_pwd()")

def note_pwd():
    if(len(global_data.arguments) != 1):
        sys.stdout.write('Only one argument for note pdf.')
        if(lock != None): rel_lock()
        exit(1)
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    num = global_data.note_number - int(global_data.arguments[0]) + 1
    i = 0
    for line in selectionFILE.readlines():
        i += 1
        if(i == num):
            sys.stdout.write(os.path.realpath(os.path.join(line.strip() , "FILES")))
    selectionFILE.close()

#note_view = lambda:sys.stdout.write("note_view()")

def note_view():
    if(len(global_data.arguments) != 1):
        sys.stdout.write('Only one argument for note pdf.')
        if(lock != None): rel_lock()
        exit(1)
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    num = global_data.note_number - int(global_data.arguments[0]) + 1
    i = 0
    for line in selectionFILE.readlines():
        i += 1
        if(i == num):
            name = os.path.basename(os.path.realpath(line.strip()))
            open_note(name)  
                
            print '\x1b[1;35m'
            print '----------------------------------------------------------'
            print str(num) + '\t' + name
            print '----------------------------------------------------------'
            print '\x1b[0m'
 
            print '* keywords:'
            
            for key in global_data.note_key_words:
                print key
         
            print '* title:'
            print global_data.note_title.strip()
            print '* date (D/M/Y)'
            print global_data.note_date[1] + '/' + global_data.note_date[2] + '/' + global_data.note_date[3]
            print '* note:'

            print '\x1b[1m'
            note = open(global_data.note_note_path , 'r')

            for line in note.readlines():
                sys.stdout.write(line)

            note.close()
            print '\x1b[0m'


    selectionFILE.close()

#note_local = lambda:sys.stdout.write("note_local()")

def note_local():
    if(len(global_data.arguments) != 0):
        sys.stdout.write('No arguments for localsetup.')
        if(lock != None): rel_lock()
        exit(1)
    global_data.local_setup = not global_data.local_setup

#date_note = lambda:sys.stdout.write("date_note()")

def date_note():
    if(len(global_data.arguments) != 2):
        sys.stdout.write('Not enough data to create note, try:\n$note title "some title" keywords "some key" words create\n.')
        if(lock != None): rel_lock()
        exit(1)
    pattern = '%d.%m.%Y'
    epoch = int(time.mktime(time.strptime(global_data.arguments[0], pattern)))
    print epoch
    global_data.date_from = epoch * 1000
    epoch = int(time.mktime(time.strptime(global_data.arguments[1], pattern)))
    print epoch
    global_data.date_to = epoch * 1000
#    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
#
#    BEFORE = lambda b,a : b
#    AFTER = lambda b,a : a
#    INSIDE = lambda b,a : a and b
#
#    infun = INSIDE
#
#    if(global_data.arguments[0] == '-'):
#        fm = ['0' , '0' , '0']
#        infun = BEFORE
#    else:
#        fm = global_data.arguments[0].strip().split()
#    if(global_data.arguments[1] == '-'):
#        to = ['99','99','99']
#        infun = AFTER
#    else:
#        to = global_data.arguments[1].strip().split()
#    i = 0
#    for line in selectionFILE.readlines():
#        i += 1
#        name = os.path.basename(os.path.realpath(line.strip()))
#        open_note(name)
#
#        before = int(global_data.note_date[3]) < int(to[2])
#        if(int(global_data.note_date[3]) == int(to[2])):
#            before = int(global_data.note_date[2]) < int(to[1])
#            if(int(global_data.note_date[2]) == int(to[1])):
#                before = int(global_data.note_date[1]) <= int(to[0])
#
#        after = int(global_data.note_date[3]) > int(fm[2])
#        if(int(global_data.note_date[3]) == int(fm[2])):
#            after = int(global_data.note_date[2]) > int(fm[1])
#            if(int(global_data.note_date[2]) == int(fm[1])):
#                after = int(global_data.note_date[1]) >= int(fm[0])
#
#        inside = infun(before , after)
#        
#        if(inside):
#            
#            sys.stdout.write('\x1b[1;35m')
#            print '----------------------------------------------'
#            print str(global_data.note_number - i + 1) + '\t' + name
#            print '----------------------------------------------'
#            sys.stdout.write('\x1b[0m')
#            print '* key words:'
#            for word in global_data.note_key_words:
#                sys.stdout.write(' \"' + word + '\" ')
#            print ' '
#            print '* title:'
#            sys.stdout.write('\x1b[1m')
#            print global_data.note_title.strip()
#            sys.stdout.write('\x1b[0m')
#        note = open(global_data.note_note_path , 'r')
#        note.close()
#
#    selectionFILE.close()

#note_help = lambda:sys.stdout.write("note_help()")

def note_help():
    if(len(global_data.arguments) != 0):
        sys.stdout.write('No arguments for note help.')
        if(lock != None): rel_lock()
        exit(1)
    print 'Syntax:'
    print '$note -operator1 argument11 argument12 argument13 ... -operator argument21 argument22 ... ...'
    print 'Best to use latin ASCI letters A-Z, a-z and numbers 0123456789.'
    print 'Avoid special characters.'
    for verb in verbs.keys():
        print verbs[verb][2]
    for verb in verbs.keys():
        print verbs[verb][2]

#short_notes = lambda:sys.stdout.write("short_notes()")

def short_notes():
    open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'w').close()
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    files = os.listdir(global_data.setup['notepath'][-1])
    files.sort()
    i = 0
    for f in files:
        open_note(f)

        i += 1
        if(i > global_data.note_number - int(global_data.setup['max'][-1]) - global_data.max_plus):
            sys.stdout.write('\x1b[1;35m')
            print '----------------------------------------------------------'
            print str(global_data.note_number - i + 1) + '\t' + f
            print '----------------------------------------------------------'
            sys.stdout.write('\x1b[0m')
            print '* key words:'
            for word in global_data.note_key_words:
                sys.stdout.write(' ' + word + ' ')
            print ' '
            print '* title:'
            sys.stdout.write('\x1b[1m')
            print global_data.note_title.strip()
            sys.stdout.write('\x1b[0m')
        selectionFILE.write(global_data.note_file_directory + '\n')

    selectionFILE.close()

#key_notes = lambda:sys.stdout.write("key_notes()")

def key_notes():
    open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'w').close()
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    files = os.listdir(global_data.setup['notepath'][-1])
    files.sort()
    keywords = set([])
    for f in files:
        open_note(f)
        keywords.update(global_data.note_key_words)
        selectionFILE.write(global_data.note_file_directory + '\n')
    keywords = list(keywords)
    keywords.sort()
    for word in keywords:
        sys.stdout.write('\"' + word + '\" ')
    sys.stdout.write('\n')
    selectionFILE.close()

#max_notes = lambda:sys.stdout.write("max_notes()")

def max_notes():
    if(len(global_data.arguments) != 1):
        sys.stdout.write('No global_data.arguments for max.')
        if(lock != None): rel_lock()
        exit(1)
    global_data.max_plus = int(global_data.arguments[0])

#note_move = lambda:sys.stdout.write("note_move()")

def note_move():
    if(len(global_data.arguments) != 1):
        sys.stdout.write('Only one argument for note cd.')
        if(lock != None): rel_lock()
        exit(1)
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    num = global_data.note_number - int(global_data.arguments[0]) + 1
    i = 0
    for line in selectionFILE.readlines():
        i += 1
        if(i == num):
            print 'mv ' + line.strip() + ' ' + global_data.setup['trashpath'][-1]
            os.system('mv ' + line.strip() + ' ' + global_data.setup['trashpath'][-1])
    selectionFILE.close()

#edit_note = lambda:sys.stdout.write("edit_note()")

def edit_note():
    if(len(global_data.arguments) != 1):
        sys.stdout.write('Only one argument for edit note .')
        if(lock != None): rel_lock()
        exit(1)
    selectionFILE = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'r+')
    num = global_data.note_number - int(global_data.arguments[0]) + 1
    i = 0
    for line in selectionFILE.readlines():
        i += 1
        if(i == num):
            name = os.path.basename(os.path.realpath(line.strip()))
            
            global_data.note_file_directory = os.path.join(global_data.setup['notepath'][-1] , name)
            try:
                os.stat(os.path.join(global_data.note_file_directory , "DATA" , name + '.setup'))
            except os.error as e:
                sys.stdout.write('No setup in note.')
                if(lock != None): rel_lock()
                exit(1)
            local_setup_path = os.path.join(global_data.note_file_directory , "DATA" , 
                    name + '.setup')
            get_setup(global_data.setup , local_setup_path)  
            complement_setup()
            global_data.note_note_path = os.path.join(global_data.note_file_directory , "DATA" , name + '.note')
            global_data.note_info_path = os.path.join(global_data.note_file_directory , "DATA" , name)
            global_data.note_tex_path = os.path.join(global_data.note_file_directory , "DATA" , name + global_data.setup['ext'][-1])
     
#            info = open(global_data.note_info_path)
#            lines = info.readlines()

            this_setup = {}
            get_setup(this_setup , global_data.note_info_path)

            print global_data.note_key_words
#            global_data.note_title = this_setup["this_title"][-1]
#            global_data.note_key_words = this_setup["this_key"]
#            global_data.note_date = this_setup["this_date"]
#            global_data.note_uuid4 = this_setup["this_uuid4"][-1]
#            global_data.note_name = this_setup["this_name"][-1]


            if(global_data.note_title == None):
                global_data.note_title = this_setup["this_title"][-1]
            if(global_data.note_key_words == None):
                global_data.note_key_words = []
            if(global_data.note_yek_words == None):
                global_data.note_yek_words = []
            global_data.note_key_words.extend(this_setup["this_key"])
            for word in global_data.note_yek_words:
                try:
                    global_data.note_key_words.remove(word)
                except AttributeError as e:
                    print word + ' not found in note key words.'
            global_data.note_date = this_setup["this_date"]
            global_data.note_uuid4 = this_setup["this_uuid4"][-1] 
            global_data.note_name = this_setup["this_name"][-1]

#            info.close()
            
            open(global_data.note_note_path , 'w').close()
            note = open(global_data.note_note_path , 'w')
            os.system(global_data.setup['editor'][-1] + ' ' + global_data.note_tex_path)
            insert = False
            note = open(global_data.note_note_path , 'w')
            output = open(global_data.note_tex_path , 'r')
            for line in output.readlines():
                if((not re.search(r'begin_note' , line) == None) or (not re.search(r'end_note' , line) == None)):
                    insert = not insert
                    continue
                if(insert):
                    note.write(line)
            output.close()
            note.close()
            open(global_data.note_info_path , 'w').close()
            info = open(global_data.note_info_path , 'w')
            info.write("this_title=" + global_data.note_title.strip() + '\n')
            for word in global_data.note_key_words:
                info.write("this_key=" + word + '\n')
            info.write("this_date=" + global_data.note_date[0] + '\n')
            info.write("this_date=" + global_data.note_date[1] + '\n')
            info.write("this_date=" + global_data.note_date[2] + '\n')
            info.write("this_date=" + global_data.note_date[3] + '\n')
            info.write("this_date=" + global_data.note_date[4] + '\n')
            info.write("this_uuid4=" + global_data.note_uuid4 + '\n')
            info.write("this_name=" + global_data.note_name + '\n')

            info.close()
            if(not global_data.note_files == None):
                for f in global_data.note_files:
                    os.system('cp -r ' + f + ' ' + global_data.note_file_directory)
            current = os.getcwd()
            os.chdir(os.path.join(global_data.note_file_directory , "DATA"))
            os.system(global_data.setup['convert'][-1] + ' ' + global_data.note_tex_path)
            os.chdir(current)
            global_data.setup = {}
            get_setup(global_data.setup , os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'setup'))
            complement_setup()

def note_and():
    arg = []
    for argument in global_data.arguments:
        arg.append(unicodedata.normalize('NFKD',
            argument.decode("utf-8")).encode('ascii','ignore').upper())
    global_data.search_functions.append([and_funct , arg])

def note_or():
    arg = []
    for argument in global_data.arguments:
        arg.append(unicodedata.normalize('NFKD',
            argument.decode("utf-8")).encode('ascii','ignore').upper())
    global_data.search_functions.append([or_funct , arg])

def note_not():
    arg = []
    for argument in global_data.arguments:
        arg.append(unicodedata.normalize('NFKD',
            argument.decode("utf-8")).encode('ascii','ignore').upper())

    global_data.search_functions.append([not_funct , arg])

###
### GLOBAL LOCK
###

lock = None

#
# get_lock()
#
# Tries to create the ".lock" file 
# in the same directory as the "note"
# script. The ".lock" file is 
# created with flags - it is 
# created only if it does not exist.
#

def get_lock():
    global lock
    got_lock = False
    while(not got_lock):
        try:
            lock = os.open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.lock'),
                os.O_RDWR|os.O_CREAT|os.O_EXCL)
            os.write(lock , 'Lock in process (pid): ' + str(os.getpid()))
            if("lock" in global_data.setup.keys()):
                os.system(global_data.setup['lock'][-1])
            got_lock = True
        except:
            time.sleep(0.1)

#
# rel_lock()
# Tries to delete the ".lock" file 
# in the same directory as the "note"
# script. 
#

def rel_lock():
    global lock
    if(not lock == None):
        os.close(lock)
        lock = None
        os.remove(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.lock'))
        if("unlock" in global_data.setup.keys()):
            os.system(global_data.setup['unlock'][-1])


###
### HANDLING ARGUMENTS
###

global_data.arguments = []

verbs = {
        'list' : 
        [
            list_notes 
            , 0 
            , """
* List notes in the NOTES directory. 
The maximum number of notes displayed is set in "max"
in the "setup".
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-list\x1b[0m ...
Example:
\tnote -list
will list the notes.
            """
        ] ,
        'paste' : 
        [
            note_paste
            , 0 
            , """
* Paste files from note direcotry to current directory. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-paste\x1b[0m ... <note number>
Example:
\tnote -paste 1
will paste the contents of note 1 to current dir.
            """
        ] ,

        'key' : 
        [
            key_words
            , -1
            , """
* Add keywords to note. 
This is used together with "create".
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-key\x1b[0m <one or more key words> ... -create
Example:
\tnote -key key1 somekey2 -title "some title" -create
will create a note with the keywords "key1" and "somekey2".
            """
        ] ,
        'yek' : 
        [
            yek_words
            , -1
            , """
* Remove keywords from note.
This is used together with "create".
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-yek\x1b[0m <one or more key words> ... -create
Example:
\tnote -key goodkey badkey -title "Some note" -create
will first create a note with the keywords 
"goodkey" and "badkey"
\tnote -yek badkey -edit <number of the note created earlier>
assuming that the correct note number is used, will
remove the "badkey"

            """
        ], 
        'title' : 
        [
            title_note
            , 1
            , """
* Add note title. 
This is used with "create".
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-title\x1b[0m <single title> ...
Example:
\tnote -key key1 some -title "some title" -create
creates note with title "some title" and keywords 
"key1" and "some".
"""] , 
        'find' : 
        [
            find_note
            , -1
            , """
* Find note. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-find\x1b[0m <one or more key words> ...
Example:
\tnote -find some note
will look for keywords "some", "note" in NOTES.
            """
        ] ,
        'files' :
        [
            files_note
            , -1
            , """
* Add files to note. 
This is used with "create"
to add files to note.
Usage:
\t\x1b[1m\x1b[1mnote\x1b[0m\x1b[0m ... \x1b[1m-files\x1b[0m <one or more files to add to note> ...
Example:
\tnote -key some key -title "some title" -files some_file1 some_file2 -create
will create a note with key "some" "note" title "some title"
and will add "some_file1" and "some_file2" to the note "FILES".
            """
        ] ,
        'cd' :
        [
            note_cd
            , 1
            , """
* Change directory to note. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-cd\x1b[0m <number of note> ...
Example:
\tnote -cd 1
change directory to 1'st note "FILES".
            """
        ] ,
        'pwd' :
        [
            note_pwd
            , 1
            , """
* Print note directory to stdout. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-pwd\x1b[0m <number of note> ...
Example:
\techo $(note -pwd 1)
            """
        ] ,
        'pdf' :
        [
            note_pdf
            , 1
            , """
* View note. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-pdf\x1b[0m <number of note> ...
Example:
\tnote -pdf 1
"pdf" does not mean that "portable document format"
is assumed.
            """
        ] ,
        'view' :
        [
            note_view
            , 1
            , """
* View note. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-view\x1b[0m <number of note> ...
Example:
\tnote -view 1
will print note info to stdout.
"""
        ] ,
        'localsetup' :
        [
            note_local
            , 0
            , """
* There will be a local setup file. 
This is used with "create".
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-localsetup\x1b[0m ...
Example:
\tnote -key key1 -title "title" -localsetup -create
will create a note and edit the local setup.
            """
        ] ,
        'date' :
        [
            date_note
            , 1
            , """
* Select date range. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-date\x1b[0m "D.M.Y" "D.M.Y" ...
Example:
\tnote -date "01 01 2010" "01 01 2015" -find
will find notes creted between the first of January
2010 and the first of January 2015.
            """
        ] ,
        'help' :
        [
            note_help
            , 1
            , """
* Print help. 
Usage:\t\x1b[1mnote\x1b[0m ... \x1b[1m-help\x1b[0m ...
Example:
\tnote -help
            """
        ] ,
        'short' :
        [
            short_notes
            , 1
            , """
* List notes in the NOTES directory. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-short\x1b[0m ...
Example:
\tnote -short
similar as "list" but the information
printed to stdout is shorter.
            """
        ],
        'keywords' :
        [
            key_notes
            , 1
            , """
* Print all the keywords. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-kewwords\x1b[0m  ...
Example:
\tnote -keywords
            """
        ],
        'more' :
        [
            max_notes
            , 1
            , """
* Additional number of notes to displ. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-more\x1b[0m <number> ...
Example:
\tnote -more 10 -list
will list 10 more notes.
"""
        ],
        'and' :
        [
            note_and
            , -1
            , """
* Search for notes that contain all the keywords. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-and\x1b[0m <number> ...
Example:
\tnote -and A B C -find
will find notes that contain "A" and "B" and "C"
"""
        ]
,
        'or' :
        [
            note_or
            , -1
            , """
* Search for notes that contain any of the keywords. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-or\x1b[0m <number> ...
Example:
\tnote -or A B C -find
will find notes that contain "A" or "B" or "C"
"""
        ] ,
        'not' :
        [
            note_not
            , -1
            , """
* Search for notes that contain none of the keywords. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-not\x1b[0m <number> ...
Example:
\tnote -not A B C -find
will find notes that don't contain "A" and "B" and "C"
"""
        ]

}

lock_verbs = {
        'create' : 
        [
            create_note
            , 0 
            , """
* Create new note, the keywords have to be set. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1mcreate\x1b[0m
Example:
\tnote -key key1 key2 -title "some title" -create
creates a note with key "key1" "key2" and title "some title".
            """
        ] , 
        'move' :
        [
            note_move
            , 1
            , """
* Move note to trash. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-move\x1b[0m <number of note> ...
Example:
\tnote -move 1
            """
        ],
        'edit' :
        [
            edit_note
            , 1
            , """
* Edit note. 
Usage:
\t\x1b[1mnote\x1b[0m ... \x1b[1m-edit\x1b[0m <number of note> ...
Example:
\tnote -yek oldkey -key newkey -edit 1 
            """
        ]
}

current_verb = None
    
#
# note_act()
#
# Handles the command line global_data.arguments.
#  

def note_act():
    global verbs, lock_verbs , current_verb
    for arg in sys.argv[1:]:
        if(
                (
                    (arg[1:] in verbs.keys()) or
                    (arg[1:] in lock_verbs.keys())
                ) and 
                arg[0] == '-'):
            try:
                if(current_verb in lock_verbs and current_verb != None): 
                    get_lock()
                    lock_verbs[current_verb][0]()
                    global_data.arguments = []
                    rel_lock()
                elif(current_verb in verbs and current_verb != None):
                    verbs[current_verb][0]()
                    global_data.arguments = []
            except Exception as e:
                print e.__doc__
                print e.message
                logging.error(traceback.format_exc())
                sys.stdout.write('Something wrong with command.\n')
                if(lock != None): rel_lock()
                exit(1)              
            current_verb = arg[1:]
        elif(not arg[0] == '-'):
           global_data.arguments.append(arg.replace("\n","")) 
           #print global_data.arguments
        else:
            sys.stdout.write('Invalid syntax in note.\n')
            if(lock != None): rel_lock()
            exit(1)
    try:
        if(current_verb in lock_verbs and current_verb != None): 
            get_lock()
            lock_verbs[current_verb][0]()
            global_data.arguments = []
            rel_lock()
        elif(current_verb in verbs and current_verb != None):
            verbs[current_verb][0]()
            global_data.arguments = []
    except Exception as e:
        print e.__doc__
        print e.message
        logging.error(traceback.format_exc())
        sys.stdout.write('Something wrong with command.\n')
        if(lock != None): rel_lock()
        exit(1)              


###
### HELPFULL 
###

def and_funct(kes , stack , arg):
    result = True
    if(len(arg) != 0):
        for key in arg:
            if((not key in kes)):
                result = False
        stack.append(result)
    elif(len(stack) == 2):
        a = stack.pop()
        b = stack.pop()
        result = a and b
        stack.append(result)
    else:
        sys.stdout.write('The -and expects 2 arguments in the stack.\n');
        if(lock != None): rel_lock()
        exit(1)

def or_funct(kes , stack , arg):
    result = False
    if(len(arg) != 0):
        for key in arg:
            if((key in kes)):
                result = True
        stack.append(result)
    elif(len(stack) == 2):
        a = stack.pop()
        b = stack.pop()
        result = a or b
        stack.append(result)
    else:
        sys.stdout.write('The -or expects 2 arguments in the stack.\n');
        if(lock != None): rel_lock()
        exit(1)

def not_funct(kes , stack , arg):
    result = True
    if(len(arg) != 0):
        for key in arg:
            if((key in kes)):
                result = False
        stack.append(result)
    elif(len(stack) == 1):
        a = stack.pop()
        result = not a
        stack.append(result)
    else:
        sys.stdout.write('The -not expects 1 arguments in the stack.\n');
        if(lock != None): rel_lock()
        exit(1)

def open_note(f):
    global_data.note_file_directory = os.path.join(global_data.setup['notepath'][-1] , f)
    try:
        os.stat(os.path.join(global_data.note_file_directory , "DATA" , f + '.setup'))
    except os.error as e:
        sys.stdout.write('No setup file in note.')
        if(lock != None): rel_lock()
        exit(1)
    local_setup_path = os.path.join(global_data.note_file_directory , "DATA" , 
            f + '.setup')
    get_setup(global_data.setup , local_setup_path)  
    complement_setup()
    global_data.note_note_path = os.path.join(global_data.note_file_directory , "DATA" , f + '.note')
    global_data.note_info_path = os.path.join(global_data.note_file_directory , "DATA" , f)
    global_data.note_tex_path = os.path.join(global_data.note_file_directory , "DATA" , f + global_data.setup['ext'][-1])

    this_setup = {}
    get_setup(this_setup , global_data.note_info_path)

    global_data.note_title = this_setup["this_title"][-1]
    global_data.note_key_words = this_setup["this_key"]
    global_data.note_date = this_setup["this_date"]
    global_data.note_uuid4 = this_setup["this_uuid4"][-1]
    global_data.note_name = this_setup["this_name"][-1]

    global_data.setup = {}
    get_setup(global_data.setup , os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'setup'))
    complement_setup()

def get_setup(setup , file_path):
    setupFILE = open(file_path , 'r')
    for line in setupFILE.readlines():
        if((not line.strip() == '') and (not line.strip()[0] == '#')):
            eqnb = 0
            while(line[eqnb] != '='):
                eqnb = eqnb + 1
            if(line[eqnb] != '='):
                sys.stdout.write('Syntax wrong in setup file, schould be key=value.')
                if(lock != None): rel_lock()
                exit(1)
            words = [line[0:eqnb] , line[eqnb + 1:]]
            key = words[0].strip()
            value = words[1].strip()
            if key in setup.keys():
                val = setup[key]
                val.append(value)
                setup.update({key : val})
            else:
                setup.update({key : [value]})
    setupFILE.close()

def complement_setup():
    if(not 'notepath' in global_data.setup.keys()):
        global_data.setup.update({'notepath' : [os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'NOTES')]})
    if(not 'trashpath' in global_data.setup.keys()):
        global_data.setup.update({'trashpath' : [os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'TRASH')]})
    if(not 'textemplate' in global_data.setup.keys()):
        global_data.setup.update({'textemplate' : [os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'TEMPLATE' , 'template.tex')]})
    global_data.note_number = len(os.listdir(global_data.setup['notepath'][-1]))    
    if(not 'max' in global_data.setup.keys()):
        global_data.setup.update({'max' : [global_data.note_number + 999]})
    if(not 'ext' in global_data.setup.keys()):
        global_data.setup.update({'ext' : ['.tex']})

###
### MAIN PART
###

if(__name__ == '__main__'):
    try:
        get_lock()

        all_ok = True

        try:
            os.stat(os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'setup'))
        except os.error as e:
            all_ok = False
            print "No setup file found in:"
            print os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'setup')
            create = (raw_input("Create setup file? [y/n] ") == "y")
            print """
Creating setup file...

This file can (and probably schould) be edited
to change the default settings since
the default values might not be available
on this system.

The setup file is short, relax.
"""
            f = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'setup') , 'w')
            f.write(global_data.SETUP)
            f.close()

        get_setup(global_data.setup , os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'setup'))

        if(not "notepath" in global_data.setup.keys()):
            try:
                os.stat(os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'NOTES'))
            except os.error as e:
                all_ok = False
                print "No NOTES directory found in:"
                print os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'NOTES')
                create = (raw_input("Create this directory? [y/n] ") == "y")
                if(create):
                    os.mkdir(os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'NOTES'))
                else:
                    if(lock != None): rel_lock()
                    exit(0)
                
        if(not "trashpath" in global_data.setup.keys()):
            try:
                os.stat(os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'TRASH'))
            except os.error as e:
                all_ok = False
                print "No TRASH directory found in:"
                print os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'TRASH')
                create = (raw_input("Create this directory? [y/n] ") == "y")
                if(create):
                    os.mkdir(os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'TRASH'))
                else:
                    if(lock != None): rel_lock()
                    exit(0)

        if(not "template" in global_data.setup.keys()):
            try:
                os.stat(os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'TEMPLATE'))
            except os.error as e:
                all_ok = False
                print "No TEMPLATE directory found in:" 
                print os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'TEMPLATE')
                create = (raw_input("Create this directory? [y/n] ") == "y")
                if(create):
                    os.mkdir(os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'TEMPLATE'))
                    f = open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , 'TEMPLATE' , 'template.tex') , 'w')
                    f.write(global_data.TEMPLATE)
                    f.close()
                else:
                    if(lock != None): rel_lock()
                    exit(0)

        complement_setup()

        try:
            os.stat(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection'))
        except os.error as e:
            open(os.path.join(os.path.dirname(os.path.realpath(__file__)) , '.selection') , 'w').close()

        rel_lock()
        
        if(all_ok): 
            note_act()
    except Exception as e:
        print e.__doc__
        print e.message
        logging.error(traceback.format_exc())
        if(not lock == None):
            print 'Cleaning up, exiting.'
            rel_lock()
    
